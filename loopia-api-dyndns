#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Dynamically updates the IPv4/IPv6 DNS records for domains registered with Loopia.
https://joelpurra.com/projects/loopia-api-dyndns/

Based on Loopia API's official sample script.
https://support.loopia.se/wiki/uppdatera-dynamisk-ip-adress-med-loopiaapi/
"""

import ipaddress
import os
import re
import sys
import urllib.request
import xmlrpc.client


def print_error(msg):
    print(msg, file=sys.stderr)

def get_config(configuration_filepath):

    config_names = {
        "username": "LOOPIA_API_USERNAME",
        "password": "LOOPIA_API_PASSWORD",
        "domains": "LOOPIA_API_DOMAINS",
    }

    invalid_config = False
    for key, value in config_names.items():
        if value in os.environ:
            config[key] = os.environ[value]
        else:
            invalid_config = True
            break

    # Convert a colon and comma separated list of tuples from
    # the environment variable LOOPIA_API_DOMAINS
    if not invalid_config:
        domains = config['domains'].split(",")
        domain_list = []
        for domain in test_domains.split(","):
            subdomain, name = domain.split(":")
            domain_list.append({"name": name, "subdomain": subdomain})
        config['domains'] = domain_list

    if invalid_config:
        import json
        with open(configuration_filepath, "r") as f:
            config = json.load(f)

    return config

class Config:
    check_ipv4_url = "https://api-ipv4.ip.sb/ip"
    check_ipv6_url = "https://api-ipv6.ip.sb/ip"
    loopia_api_xml_rpc_url = "https://api.loopia.se/RPCSERV"


def api_error(exception):
    print_error(
        "Request to Loopia API failed: {exception}".format(
            exception=exception,
        )
    )
    quit(2)


def get_string_value_from_url(url, max=None):
    try:
        return urllib.request.urlopen(url).read(max).decode("utf-8").strip()
    except:
        print_error(
            "Could not get string from url: {url}".format(
                url=url,
            )
        )
        quit(5)


def get_public_ipv4():
    ipv4str_from_url = get_string_value_from_url(Config.check_ipv4_url, 15)
    try:
        return str(ipaddress.IPv4Address(ipv4str_from_url))
    except:
        print_error(
            "Could not parse IPv4 address: {ipv4str}".format(
                ipv4str_from_url=ipv4str_from_url,
            )
        )
        quit(7)


def get_public_ipv6():
    ipv6str_from_url = get_string_value_from_url(Config.check_ipv6_url, 45)
    try:
        return str(ipaddress.IPv6Address(ipv6str_from_url))
    except:
        print_error(
            "Could not parse IPv6 address: {ipv6str}".format(
                ipv6str_from_url=ipv6str_from_url,
            )
        )
        quit(8)


def get_records(username, password, domain, subdomain, recordType):
    try:
        zone_records = client.getZoneRecords(
            username,
            password,
            domain,
            subdomain,
        )
    except Exception as exception:
        api_error(exception)

    # Remove irrelevant records and return.
    return [d for d in zone_records if d["type"] == recordType]


def update_record(username, password, domain, subdomain, value, record):
    # Does the record need updating?
    if record["rdata"] != value:
        # Setting record_id updates an existing record.
        new_record = {
            "priority": record["priority"],
            "rdata": value,
            "record_id": record["record_id"],
            "ttl": record["ttl"],
            "type": record["type"]
        }

        try:
            status = client.updateZoneRecord(
                username,
                password,
                domain,
                subdomain,
                new_record,
            )
        except Exception as exception:
            api_error(exception)
    else:
        status = "No change"

    fqdn = domain if subdomain == "@" else subdomain + "." + domain

    print(
        "{fqdn} {recordType}: {status} ({value})".format(
            fqdn=fqdn,
            recordType=record["type"],
            status=status,
            value=value,
        )
    )


def check_and_update_record(username, password, domain, subdomain, recordType, value):
    """Fetch a single record and update it"""
    records = get_records(username, password, domain, subdomain, recordType)
    recordCount = len(records)

    if recordCount != 1:
        fqdn = domain if subdomain == "@" else subdomain + "." + domain
        print_error(
            "Require exactly one {recordType} record for {fqdn}, but found {recordCount}.".format(
                fqdn=fqdn,
                recordCount=recordCount,
                recordType=recordType,
            )
        )
        quit(4)

    update_record(username, password, domain, subdomain, value, records[0])


if __name__ == "__main__":

    if len(sys.argv) > 1:
        configuration_filepath = sys.argv[1]
    else:
        configuration_filepath = "loopia-api-dyndns.json"

    config = get_config(configuration_filepath)

    # Build XML RPC client.
    client = xmlrpc.client.ServerProxy(
        uri=Config.loopia_api_xml_rpc_url,
        encoding="utf-8",
    )

    # Dynamic DNS updates.
    public_ipv4 = get_public_ipv4()
    for domain in config['domains']:
        check_and_update_record(config['username'], config['password'], domain['name'], domain['subdomain'], "A", public_ipv4)

    public_ipv6 = get_public_ipv6()
    for domain, subdomain in config['domains']:
        check_and_update_record(config['username'], config['password'], domain['name'], domain['subdomain'], "AAAA", public_ipv6)
