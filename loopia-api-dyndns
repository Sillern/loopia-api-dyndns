#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Updates dynamic DNS records for domains registered with Loopia.
https://www.loopia.se/

Supports IPv4 (A) and IPv6 (AAAA) records.
One record of each has to be present for the domain/subdomain to update. This script does not add them.

Several environment variables, documented below, are required.
Remember to NOT use your Customer Zone credentials, but your LoopiaAPI credentials.
If you don't have an API user yet you can create one in the Customer Zone.
https://www.loopia.se/api/

For security reasons you shouldn't add more permissions than necessary.
The user requires the following permissions for this script to function:

- getZoneRecords    To find out which record to update
- updateZoneRecord  To actually update the zone record

Based on the official Loopia sample code.
https://support.loopia.se/wiki/uppdatera-dynamisk-ip-adress-med-loopiaapi/

For unknown errors, please check your internet connection and the Loopia API status.
https://www.driftbloggen.se/
"""

import os
import re
import sys
import urllib.request
import xmlrpc.client


class Config:
    ########## ENVIRONMENT VARIABLE CONFIGURATION ##########
    # Your LoopiaAPI user credentials
    # Remember, these are NOT the same as your credentials for the Loopia Customer Zone.
    username = os.environ['LOOPIA_API_USERNAME']
    password = os.environ['LOOPIA_API_PASSWORD']

    # Which domain name do you wish to update?
    # Omit any subdomains here (i.e only write "mindoman.se", not "www.mindoman.se").
    domain = os.environ['LOOPIA_DOMAIN']

    # Which subdomain do you wish to update? Use "@" if you wish to update the root domain.
    # Hint!
    # If you wish to change the IP address for the main subdomains ("@", "www" and "*")
    # you only need to keep "@" updated.
    # Point the other subdomains to the main domain with CNAME records.
    subdomain = os.environ['LOOPIA_SUBDOMAIN']

    ######### END ENVIRONMENT VARIABLE CONFIGURATION #########

    fqdn = domain if subdomain == '@' else subdomain + '.' + domain

    check_ipv4_url = 'https://api-ipv4.ip.sb/ip'
    check_ipv6_url = 'https://api-ipv6.ip.sb/ip'
    loopia_api_xml_rpc_url = 'https://api.loopia.se/RPCSERV'


def print_error(msg):
    print(msg, file=sys.stderr)


def api_error():
    """Print a warning message because an error has occured"""
    print_error('Unknown API Error.')
    quit(1)


def get_public_ipv4():
    """Get public IPv4 adress"""
    return urllib.request.urlopen(Config.check_ipv4_url).read()


def get_public_ipv6():
    """Get public IPv6 adress"""
    return urllib.request.urlopen(Config.check_ipv6_url).read()


def get_records(recordType):
    """Get current zone records"""
    try:
        zone_records = client.getZoneRecords(
            Config.username,
            Config.password,
            Config.domain,
            Config.subdomain
        )

        # Remove irrelevant records and return
        return [d for d in zone_records if d['type'] == recordType]
    except:
        # Quit if unable to authorize
        if 'AUTH_ERROR' in zone_records:
            print_error('API credentials are incorrect.')
            quit(2)

        api_error()


def update_record(value, record):
    """Update current record"""
    # Does the record need updating?
    if record['rdata'] != value:
        # Yes it does. Update it!
        new_record = {
            'priority': record['priority'],
            'rdata': value,
            'record_id': record['record_id'],
            'ttl': record['ttl'],
            'type': record['type']
        }

        try:
            status = client.updateZoneRecord(
                Config.username,
                Config.password,
                Config.domain,
                Config.subdomain,
                new_record
            )

            print_error(
                '{fqdn} ({recordType}): {status}'.format(
                    recordType=record['type'],
                    fqdn=Config.fqdn,
                    status=status
                )
            )

        except:
            api_error()

    else:
        # Record does not need updating
        print_error(
            '{fqdn} ({recordType}): No change'.format(
                recordType=record['type'],
                fqdn=Config.fqdn
            )
        )


def check_and_update_record(recordType, value):
    """Fetch a single record and update it"""
    records = get_records(recordType)

    if len(records) != 1:
        print_error(
            'Require exactly one {recordType} record for {fqdn}, but found {recordCount}.'.format(
                fqdn=Config.fqdn,
                recordType=recordType,
                recordCount=len(records)
            )
        )
        quit(4)

    update_record(value, records[0])


if __name__ == '__main__':
    # Build XML RPC client
    client = xmlrpc.client.ServerProxy(
        uri=Config.loopia_api_xml_rpc_url,
        encoding='utf-8'
    )

    # Get current A records and public IPv4 address
    public_ipv4 = get_public_ipv4()
    check_and_update_record('A', public_ipv4)

    # Get current AAAA records and public IPv6 address
    public_ipv6 = get_public_ipv6()
    check_and_update_record('AAAA', public_ipv6)
